<?php
/**
 * File containing the ezcQueryDelete class.
 *
 * @package Database
 * @version 1.4.7
 * @copyright Copyright (C) 2005-2010 eZ Systems AS. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 */

/**
 * Class to create select database independent DELETE queries.
 *
 * Note that this class creates queries that are syntactically independant
 * of database. Semantically the queries still differ and so the same
 * query may produce different results on different databases. Such
 * differences are noted throughout the documentation of this class.
 *
 * This class implements SQL92. If your database differs from the SQL92
 * implementation extend this class and reimplement the methods that produce
 * different results. Some methods implemented in ezcQuery are not defined by SQL92.
 * These methods are marked and ezcQuery will return MySQL syntax for these cases.
 *
 * The examples show the SQL generated by this class.
 * Database specific implementations may produce different results.
 *
 * Example:
 * <code>
 * $q = ezcDbInstance::get()->createDeleteQuery();
 * $q->deleteFrom( 'MyTable' )->where( $q->expr->eq( 'id', 1 ) );
 * $stmt = $q->prepare();
 * $stmt->execute();
 * </code>
 *
 * @package Database
 * @version 1.4.7
 * @mainclass
 */
class ezcQueryDeleteMongoDb extends ezcQueryMongoDb
{
    /**
     * The target table for the delete query.
     *
     * @var string
     */
    private $table = null;

    /**
     * Stores the WHERE part of the SQL.
     *
     * @var string
     */
    protected $whereString = null;
   
    public function where()
    {
        $args = func_get_args();
        $expressions = self::arrayFlatten( $args );

        $this->whereString = $expressions;

        return $this;
    }
    
    /**
     * Opens the query and sets the target table to $table.
     *
     * deleteFrom() returns a pointer to $this.
     *
     * @param string $table
     * @return ezcQueryDelete
     */
    public function deleteFrom( $table )
    {
        $this->table = $table;
        return $this;
    }
    
    public function execute() {
        
        // select a collection (analogous to a relational database's table)       
        $collection = $this->db->dbInstance->{$this->table};
                
        $collection->remove($this->whereString);         
    }    
    
}
?>
